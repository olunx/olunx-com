/*
 * ExportDict.java
 *
 * Created on 2007-8-31, 9:54PM
teedict , to be the best dictionary application for java me enabled devices.
Copyright (C) 2006,2007  Yong Li. All rights reserved.
 
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. 
*/

package com.teesoft.javadict;

import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.File;
import java.text.NumberFormat;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author  wind
 */
public class ExportDict extends javax.swing.JDialog {
    
    DictManager dictManager;
    static java.util.ResourceBundle theBundle = java.util.ResourceBundle.getBundle("com/teesoft/javadict/resources/JavaDict"); // NOI18N
    
    private JFileChooser chooser;
    /** Creates new form ExportDict */
    public ExportDict(java.awt.Frame parent,DictManager dictManager, boolean modal) {
        super(parent, modal);
        init(dictManager);
    }
    public ExportDict(java.awt.Dialog parent,DictManager dictManager, boolean modal) {
        super(parent, modal);
        init(dictManager);
    }
    void init(DictManager dictManager) {
        this.dictManager = dictManager;
        initComponents();
        try {
            txtMinFileSize.setText("256");
            txtSplitSize.setText("64");
            File tmp = AddDictToJar.getTmpDir();
            txtTargetFolder.setText(tmp.getAbsolutePath());
            //File jar;
            //URL url = new URL(this.getClass().getProtectionDomain().getCodeSource().getLocation().toString());
            
            //jar = new File(url.toURI());
            //File javaJarDir = new File( jar.getParent() + File.separator + "JavaMe");
            //txtJarFile.setText(javaJarDir.getAbsolutePath() + File.separator + "jStarDictM.jar");
            //txtTargetJarFile.setText(javaJarDir.getAbsolutePath() + File.separator + "jStarDictM-withdicts.jar");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        centerScreen();
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        chkPackageToJar = new javax.swing.JCheckBox();
        txtJarFile = new javax.swing.JTextField();
        btnBrowseJar = new javax.swing.JButton();
        txtTargetFolder = new javax.swing.JTextField();
        btnBrowseFolder = new javax.swing.JButton();
        chkSplitFile = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMinFileSize = new javax.swing.JFormattedTextField();
        txtSplitSize = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkTargetFolder = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        chkEnableOnly = new javax.swing.JCheckBox();
        txtTargetJarFile = new javax.swing.JTextField();
        btnBrowseTargetJar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        chkUncompressDictdz = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/teesoft/javadict/resources/JavaDict"); // NOI18N
        chkPackageToJar.setText(bundle.getString("ExportDict.chkPackageToJar.text")); // NOI18N
        chkPackageToJar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        txtJarFile.setText(bundle.getString("ExportDict.txtJarFile.text")); // NOI18N

        btnBrowseJar.setText(bundle.getString("ExportDict.btnBrowseJar.text")); // NOI18N
        btnBrowseJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseJarActionPerformed(evt);
            }
        });

        btnBrowseFolder.setText(bundle.getString("ExportDict.btnBrowseFolder.text")); // NOI18N
        btnBrowseFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseFolderActionPerformed(evt);
            }
        });

        chkSplitFile.setSelected(true);
        chkSplitFile.setText(bundle.getString("ExportDict.chkSplitFile.text")); // NOI18N
        chkSplitFile.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jLabel2.setText(bundle.getString("ExportDict.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("ExportDict.jLabel3.text")); // NOI18N

        txtMinFileSize.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(NumberFormat.getInstance())));
        txtMinFileSize.setText(bundle.getString("ExportDict.txtMinFileSize.text")); // NOI18N

        txtSplitSize.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(NumberFormat.getInstance())));
        txtSplitSize.setText(bundle.getString("ExportDict.txtSplitSize.text")); // NOI18N

        jLabel4.setText(bundle.getString("ExportDict.jLabel4.text")); // NOI18N

        jLabel5.setText(bundle.getString("ExportDict.jLabel5.text")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel3))
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(txtSplitSize, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .add(txtMinFileSize, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jLabel5))
                .add(239, 239, 239))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel2)
                    .add(txtMinFileSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, 17)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel5)
                    .add(txtSplitSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkTargetFolder.setSelected(true);
        chkTargetFolder.setText(bundle.getString("ExportDict.chkTargetFolder.text")); // NOI18N
        chkTargetFolder.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jButton3.setText(bundle.getString("ExportDict.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(bundle.getString("ExportDict.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        chkEnableOnly.setSelected(true);
        chkEnableOnly.setText(bundle.getString("ExportDict.chkEnableOnly.text")); // NOI18N
        chkEnableOnly.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        txtTargetJarFile.setText(bundle.getString("ExportDict.txtTargetJarFile.text")); // NOI18N

        btnBrowseTargetJar.setText(bundle.getString("ExportDict.btnBrowseTargetJar.text")); // NOI18N
        btnBrowseTargetJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTargetJarActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("ExportDict.jLabel1.text")); // NOI18N

        chkUncompressDictdz.setSelected(true);
        chkUncompressDictdz.setText(bundle.getString("ExportDict.chkUncompressDictdz.text")); // NOI18N
        chkUncompressDictdz.setToolTipText(bundle.getString("ExportDict.chkUncompressDictdz.toolTipText")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(chkTargetFolder)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(jLabel1)
                                        .add(chkPackageToJar)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(txtTargetFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                                    .add(txtJarFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                                    .add(txtTargetJarFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(btnBrowseTargetJar)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(btnBrowseJar)
                                        .add(btnBrowseFolder))))
                            .add(layout.createSequentialGroup()
                                .add(chkEnableOnly)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 491, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(chkUncompressDictdz)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 363, Short.MAX_VALUE)
                                .add(jButton3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton4))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(chkSplitFile))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(chkEnableOnly)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnBrowseFolder)
                    .add(txtTargetFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chkTargetFolder))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnBrowseJar)
                    .add(chkPackageToJar)
                    .add(txtJarFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnBrowseTargetJar)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(txtTargetJarFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chkSplitFile)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton3)
                            .add(jButton4))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(chkUncompressDictdz)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void btnBrowseTargetJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTargetJarActionPerformed
        if (chooser==null)
            chooser = new javax.swing.JFileChooser();
        chooser.showSaveDialog(this);
        File file = chooser.getSelectedFile();
        if (file!=null)
            txtTargetJarFile.setText( file.getAbsolutePath());
    }//GEN-LAST:event_btnBrowseTargetJarActionPerformed
    
    private void btnBrowseJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseJarActionPerformed
        if (chooser==null)
            chooser = new javax.swing.JFileChooser();
        chooser.showOpenDialog(this);
        File file = chooser.getSelectedFile();
        if (file!=null)
            txtJarFile.setText( file.getAbsolutePath());
    }//GEN-LAST:event_btnBrowseJarActionPerformed
    
    private void btnBrowseFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseFolderActionPerformed
        if (chooser==null)
            chooser = new javax.swing.JFileChooser();
        chooser.showSaveDialog(this);
        File file = chooser.getSelectedFile();
        if (file!=null)
            txtTargetFolder.setText( file.getParent());
    }//GEN-LAST:event_btnBrowseFolderActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean success=true;
        Vector v = new Vector();
        Cursor cur = this.getCursor();
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR) );
        boolean enableOnly = chkEnableOnly.isSelected();
        dictManager.search("a",1);//force load index
        for(int i=0;i<dictManager.size();++i) {
            if (!enableOnly || dictManager.getDict(i).isEnabled())
                v.addElement(dictManager.getDict(i));
        }
        try {
            File jar = null;
            
            File targetFolder = null;
            if (this.chkTargetFolder.isSelected()) {
                targetFolder = new File(this.txtTargetFolder.getText());
            }
            File targetJar=null;
            if (chkPackageToJar.isSelected()) {
                jar = new File(txtJarFile.getText());
                if (!jar.exists()) {
                    
                    javax.swing.JOptionPane.showMessageDialog(this,theBundle.getString("jarNotExit") +":"+ txtJarFile.getText(),
                theBundle.getString("exportError"),javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                targetJar = new File( txtTargetJarFile.getText());
            }
            
            long minSize =  Long.parseLong(this.txtMinFileSize.getText()) * 1024;
            int  splitSize = Integer.parseInt(this.txtSplitSize.getText()) * 1024;
            Object copyOption = null;
            if (chkUncompressDictdz.isSelected())
                copyOption = chkUncompressDictdz;
            

            AddDictToJar.AddFolder(v,targetFolder,copyOption,jar,targetJar,this.chkSplitFile.isSelected(), minSize,splitSize,!chkTargetFolder.isSelected(), new AddDictToJar.Listener() {

                public void afterCopy(String path) {
                    if (chkPackageToJar.isSelected()) {
                        try {
                            java.awt.Desktop.getDesktop().open(new File(path));
                        } catch (Throwable ex) {
                        }

                        javax.swing.JOptionPane.showMessageDialog(ExportDict.this, theBundle.getString("WaitAddFile") + ":" + path + "\n" + theBundle.getString("ClickContinue"),
                                theBundle.getString("WaitAddFileTitle"), javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            });
            
            
            try{
                java.awt.Desktop.getDesktop().open(targetFolder);
            }catch (Throwable ex) {
            
            }
        } catch (Throwable ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,theBundle.getString("exportError") +":"+ex.getLocalizedMessage(),
                theBundle.getString("exportError"),javax.swing.JOptionPane.ERROR_MESSAGE);
            success=true;
        }
        finally{
            this.setCursor(cur);
        }
        if (success)
            javax.swing.JOptionPane.showMessageDialog(this,theBundle.getString("exportDone"),
                theBundle.getString("exportDone"),javax.swing.JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    public void centerScreen() {
        Dimension dim = getToolkit().getScreenSize();
        Rectangle abounds = getBounds();
        setLocation((dim.width - abounds.width) / 2,
            (dim.height - abounds.height) / 2);
        requestFocus();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ExportDict((Dialog)null,DictManager.getInstance(), true).setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseFolder;
    private javax.swing.JButton btnBrowseJar;
    private javax.swing.JButton btnBrowseTargetJar;
    private javax.swing.JCheckBox chkEnableOnly;
    private javax.swing.JCheckBox chkPackageToJar;
    private javax.swing.JCheckBox chkSplitFile;
    private javax.swing.JCheckBox chkTargetFolder;
    private javax.swing.JCheckBox chkUncompressDictdz;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtJarFile;
    private javax.swing.JFormattedTextField txtMinFileSize;
    private javax.swing.JFormattedTextField txtSplitSize;
    private javax.swing.JTextField txtTargetFolder;
    private javax.swing.JTextField txtTargetJarFile;
    // End of variables declaration//GEN-END:variables
    
}
