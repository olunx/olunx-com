/* * Factory.java * * Created on September 28, 2006, 5:50 PMCopyright (C) 2006,2007  Yong Li. All rights reserved.This library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA */package com.teesoft.jfile;import com.teesoft.jfile.resource.ResourceFactory;import com.teesoft.jfile.sparse.SparseFactory;import java.io.IOException;import java.util.Vector;/** * * @author wind */public class FileFactory {    private static Vector factories = new /*<IFileFactory>*/ Vector();        static {        try {            if (isMicroedition()) {                java.lang.Class.forName("com.teesoft.jfile.j2meFileFactory");            } else {                java.lang.Class.forName("com.teesoft.jfile.j2seFileFactory");            }        } catch (Exception ex) {            ex.printStackTrace();        }        addFactory(ResourceFactory.getInstance());        addFactory(SparseFactory.getInstance());//#ifndef mini               addFactory(com.teesoft.jfile.dz.DictZipFactory.getInstance());//#endif            }    static int edition;    public static boolean isMicroedition() {//#if microemulator //#         return true;//#else                if (edition == 0) {            String profile = System.getProperty("microedition.profiles");            //System.out.println("profile:" + System.getProperty("microedition.profiles"));            if (profile != null && profile.length() >= 4 && profile.toLowerCase().indexOf("midp") != -1) {                edition = 1;            } else {                String platform = System.getProperty("microedition.platform");                //System.out.println(platform);                if (platform != null && platform.toLowerCase().equals("microemulator")) {                    edition = 1;                } else {                    edition = 2;                }            }        }        return edition == 1;//#endif    }    static int bb = 0;    public static boolean isBlackBerry() {        if (bb == 0) {            String platform = System.getProperty("microedition.platform");            if (platform != null && platform.length() >= 4 && platform.toLowerCase().indexOf("rim") != -1) {                bb = 1;            } else {                bb = 2;            }        }        return bb == 1;    }    public static void addFactory(IFileFactory factory) {        getFactories().addElement(factory);    }    /**     * Creates a new instance of Factory     */    private FileFactory() {    }    public static FileAccessBase newFileAccess(String string) throws IOException {        return openFileAccess(string, false);    }    public static FileAccessBase openFileAccess(String string, boolean existFileOnly) throws IOException {        FileAccessBase firstFile = null;        for (int i = 0; i < getFactories().size(); ++i) {            IFileFactory factory = (IFileFactory) getFactories().elementAt(i);            FileAccessBase file = factory.newFileAccess(string);            if (file != null && (!existFileOnly || file.exists())) {                return file;            } else if (firstFile == null) {                firstFile = file;            }        }        return firstFile;    }    public static Vector listRoots() throws IOException {        Vector files = new Vector();        for (int i = 0; i < getFactories().size(); ++i) {            IFileFactory factory = (IFileFactory) getFactories().elementAt(i);            Vector lists = factory.listRoots();            if (lists != null) {                addAll(files, lists);            }        }        return files;    }    private static void addAll(Vector files, Vector lists) {        if (lists == null) {            return;        }        for (int i = 0; i < lists.size(); ++i) {            files.addElement(lists.elementAt(i));        }    }    public static Vector getFactories() {        return factories;    }    public static String getApplicationFolder() {        String homeDir = System.getProperty("user.home");        if (homeDir != null) {            String folder = "/.teedict/";            if (System.getProperty("os.name").toUpperCase().indexOf("WINDOWS") >= 0) {                folder = "\\Application Data\\TeeDict\\";            }            return homeDir + folder;        } else {            try {                Vector v = listRoots();                if (v.size() > 0) {                    for (int i = v.size() - 1; i >= 0; i--) {                        FileAccessBase file = (FileAccessBase) v.elementAt(i);                        String path = file.getAbsolutePath();                        String name = path.toLowerCase();                        if (( !(name.indexOf("c:") >= 0) && !(name.startsWith("res:"))) || name.indexOf("sdcard") >= 0 || name.indexOf("mmc") >= 0) {                            file.close();                            return path;                        }                        file.close();                    }                }                FileAccessBase file = (FileAccessBase) v.elementAt(v.size() - 1);                String path = file.getAbsolutePath();                file.close();                return path;            } catch (IOException ex) {                ex.printStackTrace();            }        }        return "/";    }}