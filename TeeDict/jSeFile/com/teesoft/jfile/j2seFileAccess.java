/*Copyright (C) 2006,2007  Yong Li. All rights reserved.This library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA */package com.teesoft.jfile;import java.io.File;import java.io.FileFilter;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Vector;public class j2seFileAccess extends FileAccessBase {    protected File connection = null;    protected InputStream input = null;    protected OutputStream output = null;    private boolean directory;    public j2seFileAccess(String s) throws IOException {        super(s);        setOffset(0);    }    public j2seFileAccess(File f) throws IOException {        super(f.getAbsolutePath());        setConnection(f);        setOffset(0);    }    public void open() throws IOException {        if (connection == null) {            String s = getLocation();            setConnection(new File(s));            if (connection!=null)                directory = connection.isDirectory();        }    }    long size = -1;    public long fileSize() {        if (size==-1)        try {            size = getConnection().length();        } catch (IOException ex) {        }        return size;    }    public boolean exists() throws IOException {        return getConnection().exists();    }    public boolean isDirectory() throws IOException {        if (connection!=null)            return connection.isDirectory();        return false;    }    public boolean isFile() throws IOException {        return !isDirectory();    }    public boolean isHidden() throws IOException {        return getConnection().isHidden();    }    public boolean canRead() throws IOException {        return getConnection().canRead();    }    public boolean canWrite() throws IOException {        return getConnection().canWrite();    }    public void close() throws IOException {        if (input != null) {            input.close();        }        if (output != null) {            output.flush();            output.close();            output=null;        }        setInputStream(null);        setConnection(null);        setOffset(0);    }    public static Vector listRoots() throws IOException {        return listRoots("");    }    public static Vector listRoots(String regex) throws IOException {        Vector v =  new Vector();// addAll(File.listRoots());                String dir= j2seFileAccess.class.getProtectionDomain().getCodeSource().getLocation().toString();        File installDir = new File(dir);                //String currDir = System.getProperty("user.dir");        //v.add(new j2seFileAccess(currDir));                String homeDir = FileFactory.getApplicationFolder();        v.add(new j2seFileAccess(homeDir));        return v;    }    protected static Vector addAll(File[] arr) throws IOException {        Vector v = new Vector();        for (int i = 0;arr!=null && i < arr.length; i++) {            if (arr[i].exists() && (arr[i].canRead() || arr[i].isDirectory()))                v.add(new j2seFileAccess(arr[i]));        }        return v;    }    public Vector listFiles() throws IOException {        return addAll(getConnection().listFiles());    }    class filter implements FileFilter {        boolean hidden = false;        String name = "";        filter(String name, boolean hidden) {            this.hidden = hidden;            this.name = name;        }        public boolean accept(File pathname) {            if (pathname.getPath().indexOf(name) >= 0) {                return pathname.isHidden() == hidden;            }            return false;        }    }    public Vector listFiles(String name, boolean includeHidden) throws IOException {        return addAll(getConnection().listFiles(new filter(name, includeHidden)));    }    protected File getConnection() throws IOException {        if (connection == null) {            open();        }        if (connection == null) {            throw new IOException("Unable to open the file:" + getLocation());        }        return connection;    }    protected void setConnection(File connection) {        this.connection = connection;    }    public InputStream getInputStream() throws IOException {        if (input == null) {            input = new FileInputStream(getConnection());        }        return input;    }    public void setInputStream(InputStream input) {        this.input = input;    }    public OutputStream getOutputStream() throws IOException {        if (output == null) {            output = new FileOutputStream(getConnection());        }        return output;    }    public void setOutputStream(OutputStream output) {        this.output = output;    }    public String getSeparator() {        return File.separator;    }    public String getPath() throws IOException {        return getConnection().getPath();    }    public String getAbsolutePath() throws IOException {        return getConnection().getAbsolutePath();    }    public void flush() throws IOException {        if (output != null) {            output.flush();        }            }    public String getName() throws IOException {        String name = getConnection().getName();        if (name.length() == 0) {            return name;        }        if (name.substring(name.length() - 1).equals(this.getSeparator())) {            name = name.substring(0, name.length() - 1);        }        return name;    }    public void create() throws IOException {        this.getConnection().createNewFile();    }    public IFileFactory getFileFactory() {        return j2seFileFactory.getInstance();    }    public void mkdir() throws IOException {        this.getConnection().mkdir();        this.directory = true;    }    @Override    public void delete() throws IOException {        getConnection().delete();    }    public boolean isCompressed() {        return false;    }    public boolean isRawFile() {        return true;    }    }